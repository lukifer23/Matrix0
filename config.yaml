# Matrix0 V2 Production Configuration
# Optimized for performance and strong play

model:
  # V2 Architecture Features
  planes: 19                       # Input planes for chess board
  channels: 320                    # Number of channels in residual blocks (32M model)
  blocks: 24                       # Number of residual blocks (32M model)
  attention_heads: 20              # Number of attention heads (32M model)
  policy_size: 4672                # Policy output size
  norm: "group"                    # GroupNorm instead of BatchNorm
  activation: "silu"               # SiLU activation instead of ReLU
  preact: true                     # Pre-activation residual blocks
  droppath: 0.05                   # DropPath regularization (reduced for stability)
  policy_factor_rank: 128          # Factorized policy head (32M model)
  aux_policy_from_square: true     # Auxiliary from-square prediction
  aux_policy_move_type: true       # Auxiliary move-type prediction
  ssl_curriculum: true             # Self-supervised learning curriculum
  self_supervised: true            # Enable SSL
  ssl_tasks: ["piece", "threat", "pin", "fork", "control"]  # Enable advanced SSL tasks
  ssrl_tasks: []                   # Keep SSRL off for now (optional)

selfplay:
  num_workers: 3                   # Three workers for generation
  batch_size: 128                  # Larger batches for efficiency
  max_games: 750                   # Generate 750 games per cycle
  max_game_len: 160                # Longer games to reduce early draws
  min_resign_plies: 50             # Avoid premature resignations
  resign_threshold: -0.98          # Stricter resignation
  num_simulations: 160             # Balanced quality vs speed on MPS
  draw:
    min_plies: 60                  # Require more play before draw checks
    window: 16                     # Wider window
    min_unique: 8                  # More unique positions
    halfmove_cap: 100              # FIDE fifty-move close but more tolerant

training:
  batch_size: 128                  # Reduced for MPS memory headroom
  epochs: 1                        # Single epoch per cycle; repeat cycles
  learning_rate: 0.001
  weight_decay: 0.0001
  checkpoint_dir: "checkpoints"    # Directory for checkpoints
  checkpoint: "enhanced_best.pt"   # Promote trained checkpoint as base
  gradient_accumulation_steps: 1   # Reduce graph lifetime on MPS
  grad_clip_norm: 0.5              # Stable
  ssl_weight: 0.04                 # Slightly reduced to decouple policy/value
  ssl_warmup_steps: 1500           # Longer warmup for smoother coupling
  ssl_target_weight: 1.0           # Normalize SSL magnitude
  ssl_chunk_size: 16               # Prevent OOM
  precision: "fp16"                # Optimized mixed precision
  use_amp: true                    # AMP
  warmup_steps: 500                # Longer warmup for extended steps
  memory_limit_gb: 14              # MPS limit
  gradient_checkpointing_strategy: "tower_only"  # Lower memory
  steps_per_epoch: 8000            # Extended training per cycle
  use_curriculum: true
  curriculum_phases:
    - { name: openings, steps: 1500, description: "Bootstrap with openings-heavy data" }
    - { name: mixed,    steps: 6500, description: "Blend external + self-play" }
  policy_masking: true             # Smart masking
  policy_label_smoothing: 0.05     # Mild label smoothing for policy CE
  value_loss: "huber"              # Robust value regression
  huber_delta: 1.0                 # Huber threshold

orchestrator:
  initial_games: 750               # 750 games per cycle
  subsequent_games: 750            # Force self-play each cycle
  games_per_cycle: 750             # Single large cycle
  train_epochs_per_cycle: 1        # One epoch per cycle
  eval_games_per_cycle: 12         # Faster cadence
  keep_top_k: 1                    # Keep only best model
  continuous_mode: false           # Single run mode
  checkpoint_override: "enhanced_best.pt"  # Promote trained checkpoint
  tui: "table"                     # Use table display mode
  ui:
    compact: true                  # Child processes log to files; console stays clean

eval:
  games: 4                         # Light orchestrator eval; use enhanced_eval for deep
  num_simulations: 800             # Production simulations
  max_moves: 160                   # Avoid early auto-draws
  external_engines: ["stockfish"]  # Compare against Stockfish
  tournament_rounds: 4             # More tournament rounds
  strength_estimation_games: 4     # More strength estimation games

mcts:
  num_simulations: 96               # Default; self-play overrides to 160
  cpuct: 2.2
  cpuct_start: 2.8
  cpuct_end: 1.8
  cpuct_plies: 40
  dirichlet_alpha: 0.3
  dirichlet_frac: 0.25
  dirichlet_plies: 16
  selection_jitter: 0.05
  fpu: 0.2
  draw_penalty: -0.5
  tt_capacity: 1000000
  tt_cleanup_frequency: 500
  tt_memory_limit_mb: 1024
  batch_size: 8                     # Smaller per-worker inference batches on MPS
  encoder_cache: true
  legal_softmax: true               # Softmax over legal moves only for priors
  max_children: 0
  min_child_prior: 0.0
  no_instant_backtrack: true
  parent_q_init: true
  tt_cleanup_interval_s: 5
  value_from_white: true            # Use side-to-move value consistently
  virtual_loss: 2.0
  enable_memory_cleanup: true
  memory_cleanup_threshold_mb: 512
  max_tree_nodes: 70000
  # FIXED: Parallel MCTS with robust error handling and deadlock prevention
  num_threads: 2                   # Fewer threads reduces contention on MPS
  parallel_simulations: true
  simulation_batch_size: 8         # Smaller sim batches to keep latency under timeouts
  tree_parallelism: true

presets:
  mps:
    device: "mps"
    num_threads: 4  # Match worker count
    inference_batch_size: 32
    mcts_threads: 4  # Match worker count
    worker_threads: 1  # 1 core per worker for 4 workers
