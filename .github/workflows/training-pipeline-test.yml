name: Training Pipeline Test

on:
  push:
    branches: [ main, master ]
    paths:
      - 'azchess/selfplay/**'
      - 'azchess/training/**'
      - 'train_comprehensive.py'
      - 'azchess/orchestrator.py'
  workflow_dispatch: # Allow manual triggering

jobs:
  pipeline-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create minimal test data
      run: |
        mkdir -p test_data/selfplay
        mkdir -p test_data/training
        
        # Create a minimal test dataset
        python -c "
        import numpy as np
        import os
        
        # Create minimal self-play data
        test_data = {
            's': np.random.rand(100, 19, 8, 8).astype(np.float32),
            'pi': np.random.rand(100, 4672).astype(np.float32),
            'z': np.random.choice([-1, 0, 1], 100).astype(np.float32)
        }
        
        np.savez('test_data/selfplay/test_game.npz', **test_data)
        print('✅ Test data created')
        "
        
    - name: Test data loading
      run: |
        python -c "
        from azchess.data_manager import DataManager
        from azchess.config import Config
        import os
        
        print('✅ Testing data loading...')
        
        # Create minimal config for testing
        cfg = Config.load('config.yaml')
        cfg.data.data_dir = 'test_data'
        
        # Test data manager
        dm = DataManager(cfg)
        print('✅ Data manager created')
        
        # Test data loading
        try:
            data = dm.get_training_data(max_samples=50)
            print(f'✅ Data loading successful: {len(data)} samples')
        except Exception as e:
            print(f'⚠️  Data loading issue: {e}')
            
        print('✅ Data loading tests completed')
        "
        
    - name: Test training script (minimal)
      run: |
        python -c "
        from azchess.model.resnet import PolicyValueNet
        from azchess.config import Config
        import torch
        import torch.optim as optim
        
        print('✅ Testing minimal training...')
        
        # Create minimal model and training setup
        cfg = Config.load('config.yaml')
        model = PolicyValueNet.from_config(cfg.model())
        
        # Test optimizer creation
        optimizer = optim.AdamW(model.parameters(), lr=1e-3)
        print('✅ Optimizer created')
        
        # Test single training step
        model.train()
        x = torch.randn(1, 19, 8, 8)
        target_pi = torch.randn(1, 4672)
        target_v = torch.randn(1)
        
        optimizer.zero_grad()
        policy, value = model(x)
        
        # Simple loss calculation
        policy_loss = torch.nn.functional.cross_entropy(policy, target_pi.argmax(dim=1))
        value_loss = torch.nn.functional.mse_loss(value.squeeze(), target_v)
        total_loss = policy_loss + value_loss
        
        total_loss.backward()
        optimizer.step()
        
        print(f'✅ Training step successful: loss = {total_loss.item():.4f}')
        print('✅ All training pipeline tests passed!')
        "
        
    - name: Test configuration validation
      run: |
        python -c "
        from azchess.config import Config
        import yaml
        
        print('✅ Testing configuration validation...')
        
        # Load and validate config
        cfg = Config.load('config.yaml')
        print('✅ Config loaded successfully')
        
        # Test key sections
        assert hasattr(cfg, 'model'), 'Missing model config'
        assert hasattr(cfg, 'training'), 'Missing training config'
        assert hasattr(cfg, 'mcts'), 'Missing MCTS config'
        
        print('✅ Configuration validation passed')
        "
